// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datacube_tile_proto.proto

package io.mapped.proto;

public final class DatacubeTileProto {
  private DatacubeTileProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface DatacubeTileOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {

    // repeated uint32 pixels = 1 [packed = true];
    /**
     * <code>repeated uint32 pixels = 1 [packed = true];</code>
     *
     * <pre>
     * repeating x,y data
     * </pre>
     */
    java.util.List<java.lang.Integer> getPixelsList();
    /**
     * <code>repeated uint32 pixels = 1 [packed = true];</code>
     *
     * <pre>
     * repeating x,y data
     * </pre>
     */
    int getPixelsCount();
    /**
     * <code>repeated uint32 pixels = 1 [packed = true];</code>
     *
     * <pre>
     * repeating x,y data
     * </pre>
     */
    int getPixels(int index);

    // repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;
    /**
     * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
     *
     * <pre>
     * must have length of pixelCount
     * </pre>
     */
    java.util.List<io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel> 
        getChannelList();
    /**
     * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
     *
     * <pre>
     * must have length of pixelCount
     * </pre>
     */
    io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel getChannel(int index);
    /**
     * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
     *
     * <pre>
     * must have length of pixelCount
     * </pre>
     */
    int getChannelCount();
  }
  /**
   * Protobuf type {@code io.mapped.proto.DatacubeTile}
   *
   * <pre>
   **
   * A basic tile with a repeating stream of pixels locations (i.e. x,y,x,y,x,y...) and a single data channel of counts.
   * The data channel must be half the length of the pixels aligned so that the count matches the pixel - that is, the
   * channel data item at index 0 represents the count for the pixel defined by the pixels indexed at 0 (x) and 1 (y).
   *
   * This is a simple tile used only for demonstration purposes.  Changes to make:
   *  i.   Make the pixels relative to the previous (improves compression)
   *  ii.  Support necessary metadata for channels
   *  iii. Review all types and ensure the smallest is used (i.e. 256 pixels requires 8 bytes only)
   *  iv.  ZigZag encode if needed
   * </pre>
   */
  public static final class DatacubeTile extends
      com.google.protobuf.GeneratedMessageLite
      implements DatacubeTileOrBuilder {
    // Use DatacubeTile.newBuilder() to construct.
    private DatacubeTile(com.google.protobuf.GeneratedMessageLite.Builder builder) {
      super(builder);

    }
    private DatacubeTile(boolean noInit) {}

    private static final DatacubeTile defaultInstance;
    public static DatacubeTile getDefaultInstance() {
      return defaultInstance;
    }

    public DatacubeTile getDefaultInstanceForType() {
      return defaultInstance;
    }

    private DatacubeTile(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                pixels_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              pixels_.add(input.readUInt32());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                pixels_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                pixels_.add(input.readUInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                channel_ = new java.util.ArrayList<io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel>();
                mutable_bitField0_ |= 0x00000002;
              }
              channel_.add(input.readMessage(io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          pixels_ = java.util.Collections.unmodifiableList(pixels_);
        }
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          channel_ = java.util.Collections.unmodifiableList(channel_);
        }
        makeExtensionsImmutable();
      }
    }
    public static com.google.protobuf.Parser<DatacubeTile> PARSER =
        new com.google.protobuf.AbstractParser<DatacubeTile>() {
      public DatacubeTile parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DatacubeTile(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DatacubeTile> getParserForType() {
      return PARSER;
    }

    public interface ChannelOrBuilder
        extends com.google.protobuf.MessageLiteOrBuilder {

      // repeated uint32 value = 1 [packed = true];
      /**
       * <code>repeated uint32 value = 1 [packed = true];</code>
       */
      java.util.List<java.lang.Integer> getValueList();
      /**
       * <code>repeated uint32 value = 1 [packed = true];</code>
       */
      int getValueCount();
      /**
       * <code>repeated uint32 value = 1 [packed = true];</code>
       */
      int getValue(int index);
    }
    /**
     * Protobuf type {@code io.mapped.proto.DatacubeTile.Channel}
     */
    public static final class Channel extends
        com.google.protobuf.GeneratedMessageLite
        implements ChannelOrBuilder {
      // Use Channel.newBuilder() to construct.
      private Channel(com.google.protobuf.GeneratedMessageLite.Builder builder) {
        super(builder);

      }
      private Channel(boolean noInit) {}

      private static final Channel defaultInstance;
      public static Channel getDefaultInstance() {
        return defaultInstance;
      }

      public Channel getDefaultInstanceForType() {
        return defaultInstance;
      }

      private Channel(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                  value_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                value_.add(input.readUInt32());
                break;
              }
              case 10: {
                int length = input.readRawVarint32();
                int limit = input.pushLimit(length);
                if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                  value_ = new java.util.ArrayList<java.lang.Integer>();
                  mutable_bitField0_ |= 0x00000001;
                }
                while (input.getBytesUntilLimit() > 0) {
                  value_.add(input.readUInt32());
                }
                input.popLimit(limit);
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
            value_ = java.util.Collections.unmodifiableList(value_);
          }
          makeExtensionsImmutable();
        }
      }
      public static com.google.protobuf.Parser<Channel> PARSER =
          new com.google.protobuf.AbstractParser<Channel>() {
        public Channel parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new Channel(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<Channel> getParserForType() {
        return PARSER;
      }

      // repeated uint32 value = 1 [packed = true];
      public static final int VALUE_FIELD_NUMBER = 1;
      private java.util.List<java.lang.Integer> value_;
      /**
       * <code>repeated uint32 value = 1 [packed = true];</code>
       */
      public java.util.List<java.lang.Integer>
          getValueList() {
        return value_;
      }
      /**
       * <code>repeated uint32 value = 1 [packed = true];</code>
       */
      public int getValueCount() {
        return value_.size();
      }
      /**
       * <code>repeated uint32 value = 1 [packed = true];</code>
       */
      public int getValue(int index) {
        return value_.get(index);
      }
      private int valueMemoizedSerializedSize = -1;

      private void initFields() {
        value_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (getValueList().size() > 0) {
          output.writeRawVarint32(10);
          output.writeRawVarint32(valueMemoizedSerializedSize);
        }
        for (int i = 0; i < value_.size(); i++) {
          output.writeUInt32NoTag(value_.get(i));
        }
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        {
          int dataSize = 0;
          for (int i = 0; i < value_.size(); i++) {
            dataSize += com.google.protobuf.CodedOutputStream
              .computeUInt32SizeNoTag(value_.get(i));
          }
          size += dataSize;
          if (!getValueList().isEmpty()) {
            size += 1;
            size += com.google.protobuf.CodedOutputStream
                .computeInt32SizeNoTag(dataSize);
          }
          valueMemoizedSerializedSize = dataSize;
        }
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      /**
       * Protobuf type {@code io.mapped.proto.DatacubeTile.Channel}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageLite.Builder<
            io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel, Builder>
          implements io.mapped.proto.DatacubeTileProto.DatacubeTile.ChannelOrBuilder {
        // Construct using io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private void maybeForceBuilderInitialization() {
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          value_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel getDefaultInstanceForType() {
          return io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel.getDefaultInstance();
        }

        public io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel build() {
          io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel buildPartial() {
          io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel result = new io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel(this);
          int from_bitField0_ = bitField0_;
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            value_ = java.util.Collections.unmodifiableList(value_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.value_ = value_;
          return result;
        }

        public Builder mergeFrom(io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel other) {
          if (other == io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel.getDefaultInstance()) return this;
          if (!other.value_.isEmpty()) {
            if (value_.isEmpty()) {
              value_ = other.value_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureValueIsMutable();
              value_.addAll(other.value_);
            }
            
          }
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // repeated uint32 value = 1 [packed = true];
        private java.util.List<java.lang.Integer> value_ = java.util.Collections.emptyList();
        private void ensureValueIsMutable() {
          if (!((bitField0_ & 0x00000001) == 0x00000001)) {
            value_ = new java.util.ArrayList<java.lang.Integer>(value_);
            bitField0_ |= 0x00000001;
           }
        }
        /**
         * <code>repeated uint32 value = 1 [packed = true];</code>
         */
        public java.util.List<java.lang.Integer>
            getValueList() {
          return java.util.Collections.unmodifiableList(value_);
        }
        /**
         * <code>repeated uint32 value = 1 [packed = true];</code>
         */
        public int getValueCount() {
          return value_.size();
        }
        /**
         * <code>repeated uint32 value = 1 [packed = true];</code>
         */
        public int getValue(int index) {
          return value_.get(index);
        }
        /**
         * <code>repeated uint32 value = 1 [packed = true];</code>
         */
        public Builder setValue(
            int index, int value) {
          ensureValueIsMutable();
          value_.set(index, value);
          
          return this;
        }
        /**
         * <code>repeated uint32 value = 1 [packed = true];</code>
         */
        public Builder addValue(int value) {
          ensureValueIsMutable();
          value_.add(value);
          
          return this;
        }
        /**
         * <code>repeated uint32 value = 1 [packed = true];</code>
         */
        public Builder addAllValue(
            java.lang.Iterable<? extends java.lang.Integer> values) {
          ensureValueIsMutable();
          super.addAll(values, value_);
          
          return this;
        }
        /**
         * <code>repeated uint32 value = 1 [packed = true];</code>
         */
        public Builder clearValue() {
          value_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          
          return this;
        }

        // @@protoc_insertion_point(builder_scope:io.mapped.proto.DatacubeTile.Channel)
      }

      static {
        defaultInstance = new Channel(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:io.mapped.proto.DatacubeTile.Channel)
    }

    // repeated uint32 pixels = 1 [packed = true];
    public static final int PIXELS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> pixels_;
    /**
     * <code>repeated uint32 pixels = 1 [packed = true];</code>
     *
     * <pre>
     * repeating x,y data
     * </pre>
     */
    public java.util.List<java.lang.Integer>
        getPixelsList() {
      return pixels_;
    }
    /**
     * <code>repeated uint32 pixels = 1 [packed = true];</code>
     *
     * <pre>
     * repeating x,y data
     * </pre>
     */
    public int getPixelsCount() {
      return pixels_.size();
    }
    /**
     * <code>repeated uint32 pixels = 1 [packed = true];</code>
     *
     * <pre>
     * repeating x,y data
     * </pre>
     */
    public int getPixels(int index) {
      return pixels_.get(index);
    }
    private int pixelsMemoizedSerializedSize = -1;

    // repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;
    public static final int CHANNEL_FIELD_NUMBER = 2;
    private java.util.List<io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel> channel_;
    /**
     * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
     *
     * <pre>
     * must have length of pixelCount
     * </pre>
     */
    public java.util.List<io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel> getChannelList() {
      return channel_;
    }
    /**
     * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
     *
     * <pre>
     * must have length of pixelCount
     * </pre>
     */
    public java.util.List<? extends io.mapped.proto.DatacubeTileProto.DatacubeTile.ChannelOrBuilder> 
        getChannelOrBuilderList() {
      return channel_;
    }
    /**
     * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
     *
     * <pre>
     * must have length of pixelCount
     * </pre>
     */
    public int getChannelCount() {
      return channel_.size();
    }
    /**
     * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
     *
     * <pre>
     * must have length of pixelCount
     * </pre>
     */
    public io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel getChannel(int index) {
      return channel_.get(index);
    }
    /**
     * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
     *
     * <pre>
     * must have length of pixelCount
     * </pre>
     */
    public io.mapped.proto.DatacubeTileProto.DatacubeTile.ChannelOrBuilder getChannelOrBuilder(
        int index) {
      return channel_.get(index);
    }

    private void initFields() {
      pixels_ = java.util.Collections.emptyList();
      channel_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (getPixelsList().size() > 0) {
        output.writeRawVarint32(10);
        output.writeRawVarint32(pixelsMemoizedSerializedSize);
      }
      for (int i = 0; i < pixels_.size(); i++) {
        output.writeUInt32NoTag(pixels_.get(i));
      }
      for (int i = 0; i < channel_.size(); i++) {
        output.writeMessage(2, channel_.get(i));
      }
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < pixels_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt32SizeNoTag(pixels_.get(i));
        }
        size += dataSize;
        if (!getPixelsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        pixelsMemoizedSerializedSize = dataSize;
      }
      for (int i = 0; i < channel_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, channel_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static io.mapped.proto.DatacubeTileProto.DatacubeTile parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(io.mapped.proto.DatacubeTileProto.DatacubeTile prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    /**
     * Protobuf type {@code io.mapped.proto.DatacubeTile}
     *
     * <pre>
     **
     * A basic tile with a repeating stream of pixels locations (i.e. x,y,x,y,x,y...) and a single data channel of counts.
     * The data channel must be half the length of the pixels aligned so that the count matches the pixel - that is, the
     * channel data item at index 0 represents the count for the pixel defined by the pixels indexed at 0 (x) and 1 (y).
     *
     * This is a simple tile used only for demonstration purposes.  Changes to make:
     *  i.   Make the pixels relative to the previous (improves compression)
     *  ii.  Support necessary metadata for channels
     *  iii. Review all types and ensure the smallest is used (i.e. 256 pixels requires 8 bytes only)
     *  iv.  ZigZag encode if needed
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          io.mapped.proto.DatacubeTileProto.DatacubeTile, Builder>
        implements io.mapped.proto.DatacubeTileProto.DatacubeTileOrBuilder {
      // Construct using io.mapped.proto.DatacubeTileProto.DatacubeTile.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        pixels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        channel_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public io.mapped.proto.DatacubeTileProto.DatacubeTile getDefaultInstanceForType() {
        return io.mapped.proto.DatacubeTileProto.DatacubeTile.getDefaultInstance();
      }

      public io.mapped.proto.DatacubeTileProto.DatacubeTile build() {
        io.mapped.proto.DatacubeTileProto.DatacubeTile result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public io.mapped.proto.DatacubeTileProto.DatacubeTile buildPartial() {
        io.mapped.proto.DatacubeTileProto.DatacubeTile result = new io.mapped.proto.DatacubeTileProto.DatacubeTile(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          pixels_ = java.util.Collections.unmodifiableList(pixels_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.pixels_ = pixels_;
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          channel_ = java.util.Collections.unmodifiableList(channel_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.channel_ = channel_;
        return result;
      }

      public Builder mergeFrom(io.mapped.proto.DatacubeTileProto.DatacubeTile other) {
        if (other == io.mapped.proto.DatacubeTileProto.DatacubeTile.getDefaultInstance()) return this;
        if (!other.pixels_.isEmpty()) {
          if (pixels_.isEmpty()) {
            pixels_ = other.pixels_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensurePixelsIsMutable();
            pixels_.addAll(other.pixels_);
          }
          
        }
        if (!other.channel_.isEmpty()) {
          if (channel_.isEmpty()) {
            channel_ = other.channel_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureChannelIsMutable();
            channel_.addAll(other.channel_);
          }
          
        }
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        io.mapped.proto.DatacubeTileProto.DatacubeTile parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (io.mapped.proto.DatacubeTileProto.DatacubeTile) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated uint32 pixels = 1 [packed = true];
      private java.util.List<java.lang.Integer> pixels_ = java.util.Collections.emptyList();
      private void ensurePixelsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          pixels_ = new java.util.ArrayList<java.lang.Integer>(pixels_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated uint32 pixels = 1 [packed = true];</code>
       *
       * <pre>
       * repeating x,y data
       * </pre>
       */
      public java.util.List<java.lang.Integer>
          getPixelsList() {
        return java.util.Collections.unmodifiableList(pixels_);
      }
      /**
       * <code>repeated uint32 pixels = 1 [packed = true];</code>
       *
       * <pre>
       * repeating x,y data
       * </pre>
       */
      public int getPixelsCount() {
        return pixels_.size();
      }
      /**
       * <code>repeated uint32 pixels = 1 [packed = true];</code>
       *
       * <pre>
       * repeating x,y data
       * </pre>
       */
      public int getPixels(int index) {
        return pixels_.get(index);
      }
      /**
       * <code>repeated uint32 pixels = 1 [packed = true];</code>
       *
       * <pre>
       * repeating x,y data
       * </pre>
       */
      public Builder setPixels(
          int index, int value) {
        ensurePixelsIsMutable();
        pixels_.set(index, value);
        
        return this;
      }
      /**
       * <code>repeated uint32 pixels = 1 [packed = true];</code>
       *
       * <pre>
       * repeating x,y data
       * </pre>
       */
      public Builder addPixels(int value) {
        ensurePixelsIsMutable();
        pixels_.add(value);
        
        return this;
      }
      /**
       * <code>repeated uint32 pixels = 1 [packed = true];</code>
       *
       * <pre>
       * repeating x,y data
       * </pre>
       */
      public Builder addAllPixels(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensurePixelsIsMutable();
        super.addAll(values, pixels_);
        
        return this;
      }
      /**
       * <code>repeated uint32 pixels = 1 [packed = true];</code>
       *
       * <pre>
       * repeating x,y data
       * </pre>
       */
      public Builder clearPixels() {
        pixels_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        
        return this;
      }

      // repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;
      private java.util.List<io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel> channel_ =
        java.util.Collections.emptyList();
      private void ensureChannelIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          channel_ = new java.util.ArrayList<io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel>(channel_);
          bitField0_ |= 0x00000002;
         }
      }

      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public java.util.List<io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel> getChannelList() {
        return java.util.Collections.unmodifiableList(channel_);
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public int getChannelCount() {
        return channel_.size();
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel getChannel(int index) {
        return channel_.get(index);
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public Builder setChannel(
          int index, io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChannelIsMutable();
        channel_.set(index, value);

        return this;
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public Builder setChannel(
          int index, io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel.Builder builderForValue) {
        ensureChannelIsMutable();
        channel_.set(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public Builder addChannel(io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChannelIsMutable();
        channel_.add(value);

        return this;
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public Builder addChannel(
          int index, io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel value) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChannelIsMutable();
        channel_.add(index, value);

        return this;
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public Builder addChannel(
          io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel.Builder builderForValue) {
        ensureChannelIsMutable();
        channel_.add(builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public Builder addChannel(
          int index, io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel.Builder builderForValue) {
        ensureChannelIsMutable();
        channel_.add(index, builderForValue.build());

        return this;
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public Builder addAllChannel(
          java.lang.Iterable<? extends io.mapped.proto.DatacubeTileProto.DatacubeTile.Channel> values) {
        ensureChannelIsMutable();
        super.addAll(values, channel_);

        return this;
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public Builder clearChannel() {
        channel_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);

        return this;
      }
      /**
       * <code>repeated .io.mapped.proto.DatacubeTile.Channel channel = 2;</code>
       *
       * <pre>
       * must have length of pixelCount
       * </pre>
       */
      public Builder removeChannel(int index) {
        ensureChannelIsMutable();
        channel_.remove(index);

        return this;
      }

      // @@protoc_insertion_point(builder_scope:io.mapped.proto.DatacubeTile)
    }

    static {
      defaultInstance = new DatacubeTile(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:io.mapped.proto.DatacubeTile)
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
